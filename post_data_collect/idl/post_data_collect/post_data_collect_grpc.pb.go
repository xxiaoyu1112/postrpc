// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package post_data_collect

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostDataCollectClient is the client API for PostDataCollect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostDataCollectClient interface {
	CollectPostDeal(ctx context.Context, in *CollectPostDealRequest, opts ...grpc.CallOption) (*CollectPostDealResponse, error)
}

type postDataCollectClient struct {
	cc grpc.ClientConnInterface
}

func NewPostDataCollectClient(cc grpc.ClientConnInterface) PostDataCollectClient {
	return &postDataCollectClient{cc}
}

func (c *postDataCollectClient) CollectPostDeal(ctx context.Context, in *CollectPostDealRequest, opts ...grpc.CallOption) (*CollectPostDealResponse, error) {
	out := new(CollectPostDealResponse)
	err := c.cc.Invoke(ctx, "/post_data_collect.PostDataCollect/CollectPostDeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostDataCollectServer is the server API for PostDataCollect service.
// All implementations must embed UnimplementedPostDataCollectServer
// for forward compatibility
type PostDataCollectServer interface {
	CollectPostDeal(context.Context, *CollectPostDealRequest) (*CollectPostDealResponse, error)
	mustEmbedUnimplementedPostDataCollectServer()
}

// UnimplementedPostDataCollectServer must be embedded to have forward compatible implementations.
type UnimplementedPostDataCollectServer struct {
}

func (UnimplementedPostDataCollectServer) CollectPostDeal(context.Context, *CollectPostDealRequest) (*CollectPostDealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectPostDeal not implemented")
}
func (UnimplementedPostDataCollectServer) mustEmbedUnimplementedPostDataCollectServer() {}

// UnsafePostDataCollectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostDataCollectServer will
// result in compilation errors.
type UnsafePostDataCollectServer interface {
	mustEmbedUnimplementedPostDataCollectServer()
}

func RegisterPostDataCollectServer(s grpc.ServiceRegistrar, srv PostDataCollectServer) {
	s.RegisterService(&PostDataCollect_ServiceDesc, srv)
}

func _PostDataCollect_CollectPostDeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectPostDealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostDataCollectServer).CollectPostDeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/post_data_collect.PostDataCollect/CollectPostDeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostDataCollectServer).CollectPostDeal(ctx, req.(*CollectPostDealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostDataCollect_ServiceDesc is the grpc.ServiceDesc for PostDataCollect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostDataCollect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post_data_collect.PostDataCollect",
	HandlerType: (*PostDataCollectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectPostDeal",
			Handler:    _PostDataCollect_CollectPostDeal_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post_data_collect.proto",
}
